import argparse

parser = argparse.ArgumentParser(description='Arguments for ppo_jssp')
# args for device
parser.add_argument('--device', type=str, default="cuda", help='Device for training')
# args for env
parser.add_argument('--n_j', type=int, default=15, help='Number of jobs of instance')
parser.add_argument('--n_m', type=int, default=15, help='Number of machines instance')
parser.add_argument('--rewardscale', type=float, default=0., help='Reward scale for positive rewards')
parser.add_argument('--init_quality_flag', type=bool, default=False, help='Flag of whether init state quality is 0, True for 0')
parser.add_argument('--low', type=int, default=1, help='LB of duration')
parser.add_argument('--high', type=int, default=99, help='UB of duration')
parser.add_argument('--np_seed_train', type=int, default=200, help='Seed for numpy for training')
parser.add_argument('--np_seed_validation', type=int, default=200, help='Seed for numpy for validation')
parser.add_argument('--torch_seed', type=int, default=600, help='Seed for torch')
parser.add_argument('--et_normalize_coef', type=int, default=1000, help='Normalizing constant for feature LBs (end time)')
parser.add_argument('--wkr_normalize_coef', type=int, default=100, help='Normalizing constant for wkr')
# args for network
parser.add_argument('--num_layers', type=int, default=3, help='No. of layers of feature extraction GNN')
parser.add_argument('--graph_pool_type', type=str, default='job', help='graph pooling type')
parser.add_argument('--input_dim', type=int, default=2, help='Number of dimension of raw node features')
parser.add_argument('--hidden_dim', type=int, default=64, help='Hidden dim of GNN')
parser.add_argument('--output_dim', type=int, default=64, help='Output dim of GNN')
parser.add_argument('--mlp_hidden_dim', type=int, default=64, help='Hidden dim of MLP in actor and critic')
parser.add_argument('--mlp_output_dim', type=int, default=1, help='Output dim of MLP in actor')
parser.add_argument('--num_mlp_layers_actor', type=int, default=2, help='No. of layers in actor MLP')
parser.add_argument('--num_mlp_layers_critic', type=int, default=2, help='No. of layers in critic MLP')
parser.add_argument('--heads', type=int, default=1, help='Number of attention heads in GAT')
# args for PPO
parser.add_argument('--num_envs', type=int, default=4, help='No. of envs for training')
parser.add_argument('--max_updates', type=int, default=10000, help='No. of episodes of each env for training')
parser.add_argument('--lr', type=float, default=2e-5, help='Learning rate')
parser.add_argument('--decayflag', type=bool, default=False, help='Learning rate decay flag')
parser.add_argument('--decay_step_size', type=int, default=2000, help='Decay step size')
parser.add_argument('--decay_ratio', type=float, default=0.9, help='Decay ratio')
parser.add_argument('--gamma', type=float, default=1, help='Discount factor')
parser.add_argument('--k_epochs', type=int, default=1, help='Update policy for K epochs')
parser.add_argument('--eps_clip', type=float, default=0.2, help='Clip parameter for PPO')
parser.add_argument('--vloss_coef', type=float, default=1, help='Critic loss coefficient')
parser.add_argument('--ploss_coef', type=float, default=2, help='Policy loss coefficient')
parser.add_argument('--entloss_coef', type=float, default=0.01, help='Entropy loss coefficient')

configs = parser.parse_args()